#!/usr/bin/env python3
"""client to talk to reminderd via Unix socket."""
# Code quality sucks.
import os
import sys
import socket
from pathlib import Path

# store here so don't need root
SOCKET_PATH = os.environ.get("REMINDERD_SOCKET", str(Path.home() / ".local" / "share" / "reminderd" / "reminderd.sock"))


def send(cmd: str) -> str:
    with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as s:
        try:
            s.connect(SOCKET_PATH)
        except FileNotFoundError:
            print("reminderd socket not found; is the daemon running?", file=sys.stderr)
            sys.exit(2)
        s.sendall((cmd + "\n").encode())
        data = b""
        while True:
            chunk = s.recv(4096)
            if not chunk:
                break
            data += chunk
        return data.decode(errors="ignore").strip()


def usage():
    print("Usage:")
    print("  reminderctl add <time> <message>")
    print("      <time> can be:")
    print("        now         - immediately")
    print("        +N          - N minutes from now (e.g. +5)")
    print("        hh:mm       - at hour:minute today or tomorrow if passed (e.g. 14:30)")
    print("        <epoch>     - unix timestamp in seconds")
    print("  reminderctl list")
    print("      List all reminders.")
    print("  reminderctl remove <id>")
    print("      Remove reminder by id.")
    print("  reminderctl ping")
    print("      Check if daemon is alive.")


def main():
    """main entry point."""
    if len(sys.argv) < 2:
        usage()
        sys.exit(1)
    cmd = sys.argv[1].lower()
    if cmd == 'add':
        if len(sys.argv) < 4:
            usage()
            sys.exit(1)
        when_arg = sys.argv[2]
        msg = ' '.join(sys.argv[3:])
        # `shutdown`(from Linux)-style time syntax
        import time, datetime
        now = int(time.time())
        when = None
        if when_arg == 'now':
            when = now
        elif when_arg.startswith('+') and when_arg[1:].isdigit():
            # +N minutes from now
            minutes = int(when_arg[1:])
            when = now + minutes * 60
        elif ':' in when_arg:
            # hh:mm today or next day if already passed
            try:
                hh, mm = map(int, when_arg.split(':'))
                dt = datetime.datetime.fromtimestamp(now)
                target = dt.replace(hour=hh, minute=mm, second=0, microsecond=0)
                if target.timestamp() < now:
                    target += datetime.timedelta(days=1)
                when = int(target.timestamp())
            except Exception:
                pass
        elif when_arg.isdigit():
            # epoch seconds
            when = int(when_arg)
        if when is None:
            print("Invalid time format. Use now, +N, hh:mm, or epoch.", file=sys.stderr)
            sys.exit(1)
        resp = send(f"ADD|{when}|{msg}")
        print(resp)
    elif cmd == 'list':
        resp = send("LIST")
        print(resp)
    elif cmd == 'remove':
        if len(sys.argv) < 3:
            usage()
            sys.exit(1)
        rid = sys.argv[2]
        resp = send(f"REMOVE|{rid}")
        print(resp)
    elif cmd == 'ping':
        print(send("PING"))
    else:
        usage()
        sys.exit(1)


if __name__ == '__main__':
    main()
